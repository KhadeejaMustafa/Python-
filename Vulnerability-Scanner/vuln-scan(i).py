# attempt to make a vulnerability scanner

import socket
import sys
import os

def grabBanner(ip, port):
  try:
     socket.setdefaulttimeout(2)
     sock_et = socket.socket() # we have created 'sock_et' as a socket object
     sock_et.connect((ip, port)) # .connect takes two arguments; server name and port number
     banner = sock_et.recv(1024) # recv() is a receive function that takes 1024 as max amount of data to be received at once. 
     # The data received will be stored in 'banner'

     return banner
  
  except Exception as e:
    return e
  

def check_vuln(banner, filename):
  
 file = open(filename, 'r')
 for line in file.readlines():
    if line.strip('\n') in banner:
      print("Vulnerability detected" + banner.strip('\n'))



def main():
    
    # check the vulnerabilty file's availability and access
    if len(sys.argv) == 2:
       file_name = sys.argv[1]
       if not os.path.isfile(file_name):
          print(file_name + " does not exist")
          exit(0)
       if not os.access(file_name, os.R_OK):
          print("access denied to " + file_name)
          exit(0)

       print("Reading Vulnerabilities from " + file_name)

    if len(sys.argv) != 2:
       print("Usage: " + str(sys.argv[1] + "<vuln filename>"))
       exit(0)


    portList = [21, 22, 25, 80, 110, 443]

    for port in portList:
       banner = grabBanner(sys.argv[1], port)
       if banner:
          print(sys.argv[1] + ":" + banner)
          check_vuln(banner, file_name)
          
    '''
    Notes:
    banner grabbing: technique used to gather information about a computer system on a network and the services running on its open ports. This information can include details 
    like the software version and the type of service running, which can be useful for system administrators and security professionals. 
    
    readlines(): method is used to read all the lines from a file and return them as a list of strings.
    
    strip(): method is used to remove any leading (spaces at the beginning) and trailing (spaces at the end) characters from a string. By default, 
    it removes whitespace characters like spaces, tabs, or newlines.

    sys.argv: stands for 'argument vectors'. The sys.argv list is a list that contains command line arguments in a Python program.      

    os.R_OK: this constant is used to test the readability of the path. or access to read the file.  
            '''
